{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Message {\n  constructor(author, content) {\n    this.author = author;\n    this.content = content;\n  }\n}\nexport class Chatservice {\n  constructor(http) {\n    this.http = http;\n    this.conversation = new Subject();\n    this.messageMap = {\n      default: \"Bonjour, Merci de remplir ce formulaire pour vous aider.\",\n      \"Formulaire Envoyé\": \"Votre données sont bien envoyées, nous vous contacterons dans les brefs delais.\"\n    };\n  }\n  getBotAnswer(msg) {\n    const userMessage = new Message(\"\", msg);\n    this.conversation.next([userMessage]);\n    const botMessage = new Message(\"LEACONSEIL\", this.getBotMessage(msg));\n    setTimeout(() => {\n      this.conversation.next([botMessage]);\n    }, 1500);\n  }\n  getBotMessage(question) {\n    let answer = this.messageMap[question];\n    return answer || this.messageMap[\"default\"];\n  }\n  ChatForm(data) {\n    const headers = new HttpHeaders();\n    return this.http.post(\"http://141.94.245.79:3000/AddFormChat\", data, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function Chatservice_Factory(t) {\n    return new (t || Chatservice)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Chatservice,\n    factory: Chatservice.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,OAAO,QAAQ,MAAM;;;AAG1C,OAAM,MAAOC,OAAO;EAChBC,YAAmBC,MAAc,EAASC,OAAe;IAAtC,WAAM,GAAND,MAAM;IAAiB,YAAO,GAAPC,OAAO;EAAW;;AAMhE,OAAM,MAAOC,WAAW;EACpBH,YAAoBI,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACxB,iBAAY,GAAG,IAAIN,OAAO,EAAa;IACvC,eAAU,GAAG;MACTO,OAAO,EAAE,0DAA0D;MACnE,mBAAmB,EAAC;KACvB;EALsC;EAMvCC,YAAY,CAACC,GAAQ;IACjB,MAAMC,WAAW,GAAG,IAAIT,OAAO,CAAC,EAAE,EAAEQ,GAAG,CAAC;IACxC,IAAI,CAACE,YAAY,CAACC,IAAI,CAAC,CAACF,WAAW,CAAC,CAAC;IACrC,MAAMG,UAAU,GAAG,IAAIZ,OAAO,CAAC,YAAY,EAAE,IAAI,CAACa,aAAa,CAACL,GAAG,CAAC,CAAC;IACrEM,UAAU,CAAC,MAAK;MACZ,IAAI,CAACJ,YAAY,CAACC,IAAI,CAAC,CAACC,UAAU,CAAC,CAAC;IACxC,CAAC,EAAE,IAAI,CAAC;EACZ;EACAC,aAAa,CAACE,QAAgB;IAC1B,IAAIC,MAAM,GAAG,IAAI,CAACC,UAAU,CAACF,QAAQ,CAAC;IACtC,OAAOC,MAAM,IAAI,IAAI,CAACC,UAAU,CAAC,SAAS,CAAC;EAC/C;EACAC,QAAQ,CAACC,IAAc;IACnB,MAAMC,OAAO,GAAG,IAAItB,WAAW,EAAE;IACjC,OAAO,IAAI,CAACO,IAAI,CAACgB,IAAI,CAAC,uCAAuC,EAAEF,IAAI,EAAE;MACjEC,OAAO,EAAEA;KACZ,CAAC;EACN;EAAC;qBAxBQhB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAkB,SAAXlB,WAAW;IAAAmB,YAFR;EAAM","names":["HttpHeaders","Subject","Message","constructor","author","content","Chatservice","http","default","getBotAnswer","msg","userMessage","conversation","next","botMessage","getBotMessage","setTimeout","question","answer","messageMap","ChatForm","data","headers","post","factory","providedIn"],"sourceRoot":"","sources":["/Users/urbancom/Desktop/ACE/assosiation_website/src/app/services/chat.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { ChatForm } from \"../components/pages/model.model\";\n\nexport class Message {\n    constructor(public author: string, public content: string) {}\n}\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class Chatservice {\n    constructor(private http: HttpClient) {}\n    conversation = new Subject<Message[]>();\n    messageMap = {\n        default: \"Bonjour, Merci de remplir ce formulaire pour vous aider.\",\n        \"Formulaire Envoyé\":\"Votre données sont bien envoyées, nous vous contacterons dans les brefs delais.\"\n    };\n    getBotAnswer(msg: any) {\n        const userMessage = new Message(\"\", msg);\n        this.conversation.next([userMessage]);\n        const botMessage = new Message(\"LEACONSEIL\", this.getBotMessage(msg));\n        setTimeout(() => {\n            this.conversation.next([botMessage]);\n        }, 1500);\n    }\n    getBotMessage(question: string) {\n        let answer = this.messageMap[question];\n        return answer || this.messageMap[\"default\"];\n    }\n    ChatForm(data: ChatForm): Observable<any> {\n        const headers = new HttpHeaders();\n        return this.http.post(\"http://141.94.245.79:3000/AddFormChat\", data, {\n            headers: headers,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}